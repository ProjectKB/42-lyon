#!/usr/bin/env python3

import sys
import parsing
import tools
import calcul
import display
import argparse
import matplotlib.pyplot as plt

FEATURES_NAME = [
                    'Arithmancy',
                    'Astronomy',
                    'Herbology',
                    'Defense Against the Dark Arts',
                    'Divination',
                    'Muggle Studies',
                    'Ancient Runes',
                    'History of Magic',
                    'Transfiguration',
                    'Potions',
                    'Care of Magical Creatures',
                    'Charms',
                    'Flying'
                ]

ROWS_FUNCTION = {
                    'Count': lambda collection: tools.count(collection),
                    'Mean':  lambda collection, count: tools.median(collection, count),
                    'Std':   lambda collection, count: tools.standard_deviation(collection),
                    'Min':   lambda collection, count: tools.min(collection, count),
                    '25%':   lambda collection, count: tools.quartile(collection, count, 1),
                    '50%':   lambda collection, count: tools.quartile(collection, count, 2),
                    '75%':   lambda collection, count: tools.quartile(collection, count, 3),
                    'Max':   lambda collection, count: tools.max(collection, count)
                }

def set_argParse():
    parser = argparse.ArgumentParser()

    parser.add_argument('dataset.csv', help='dataset', type=tools.check_dataset_name)
    parser.add_argument('-c', '--compare', help='show every relations between features.', action='store_true')
    return parser.parse_args()

def show_same_feature(dataset):
    plt.scatter(dataset['Defense Against the Dark Arts'], dataset['Astronomy'])
    plt.tick_params(axis='both', labelbottom=False, labelleft=False, length=0)
    plt.xlabel('Defense Against the Dark Arts')
    plt.ylabel('Astronomy')
    plt.show()

def demonstrate_scatter(dataset):
    for feature_name1 in FEATURES_NAME:
        for feature_name2 in FEATURES_NAME:
            if feature_name1 == feature_name2:
                break
            plt.scatter(dataset[feature_name1], dataset[feature_name2])
            plt.tick_params(axis='both', labelbottom=False, labelleft=False, length=0)
            plt.xlabel(feature_name1)
            plt.ylabel(feature_name2)
            plt.show()

def scatter():
    args    = set_argParse()
    dataset = parsing.get_dataset(sys.argv[1], FEATURES_NAME)

    demonstrate_scatter(dataset) if args.compare else show_same_feature(dataset)

scatter()
